model {
  faster_rcnn {
    num_classes: 105
    image_resizer {
      keep_aspect_ratio_resizer {
        min_dimension: 300
        max_dimension: 600
      }
    }
    feature_extractor {
      type: 'faster_rcnn_inception_resnet_v2'
      first_stage_features_stride: 8
    }
    first_stage_anchor_generator {
      grid_anchor_generator {
		width: 32
		height: 32
        scales: [0.25, 0.5, 0.75, 1.0, 1.75, 4.0]
        aspect_ratios: [0.06, 0.29, 0.48, 2.2]
        height_stride: 8
        width_stride: 8
      }
    }
	
    first_stage_atrous_rate: 2
    first_stage_box_predictor_conv_hyperparams {
      op: CONV
      regularizer {
        l2_regularizer {
          weight: 0.0
        }
      }
      initializer {
        truncated_normal_initializer {
          stddev: 0.01
        }
      }
    }
    first_stage_nms_score_threshold: 0.0
    first_stage_nms_iou_threshold: 0.7
    first_stage_max_proposals: 300
    first_stage_localization_loss_weight: 2.0
    first_stage_objectness_loss_weight: 1.0
    second_stage_box_predictor {
      rfcn_box_predictor {
        conv_hyperparams {
          op: CONV
          regularizer {
            l2_regularizer {
              weight: 0.0
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.01
            }
          }
        }
        crop_height: 18
        crop_width: 18
        num_spatial_bins_height: 3
        num_spatial_bins_width: 3
      }
    }
    second_stage_post_processing {
      batch_non_max_suppression {
        score_threshold: 0.0
        iou_threshold: 0.6
        max_detections_per_class: 100
        max_total_detections: 300
      }
      score_converter: SOFTMAX
    }
    second_stage_localization_loss_weight: 2.0
    second_stage_classification_loss_weight: 1.0
  }
}

train_config: {
  batch_size: 1
  optimizer {
    rms_prop_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate: 0.003
          decay_steps: 800000
          decay_factor: 0.95
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }
  gradient_clipping_by_norm: 10.0
  fine_tune_checkpoint: "C:/Users/Alex/Repositories/MusicObjectDetector-TF/MusicObjectDetector/data/faster_rcnn_inception_resnet_v2_atrous_coco_2017_11_08/model.ckpt"
  from_detection_checkpoint: true
  
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 180000
  # data_augmentation_options {
  #   random_horizontal_flip {
  #   }
  # }
}

train_input_reader: {
  tf_record_input_reader {
    input_path: "C:/Users/Alex/Dropbox/MusicObjectDetector-TF_Records/all_classes_without_staff_lines_writer_independent_split/training.record"
  }
  label_map_path: "C:/Users/Alex/Repositories/MusicObjectDetector-TF/MusicObjectDetector/mapping_all_classes.txt"
}

# VALIDATION

eval_config: {
  metrics_set: "pascal_voc_metrics"
  # metrics_set: "weighted_pascal_voc_metrics"
  num_examples: 533
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  # max_evals: 1
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "C:/Users/Alex/Dropbox/MusicObjectDetector-TF_Records/all_classes_without_staff_lines_writer_independent_split/validation.record"
  }
  label_map_path: "C:/Users/Alex/Repositories/MusicObjectDetector-TF/MusicObjectDetector/mapping_all_classes.txt"
  shuffle: false
  num_readers: 1
  num_epochs: 1
}

# # TESTING
# 
# eval_config: {
#   metrics_set: "pascal_voc_metrics"
#   # metrics_set: "weighted_pascal_voc_metrics"
#   num_examples: 854
#   # Note: The below line limits the evaluation process to 10 evaluations.
#   # Remove the below line to evaluate indefinitely.
#   max_evals: 1
# }
# 
# eval_input_reader: {
#   tf_record_input_reader {
#     input_path: "C:/Users/Alex/Dropbox/MusicObjectDetector-TF_Records/all_classes_without_staff_lines_writer_independent_split/test.record"
#   }
#   label_map_path: "C:/Users/Alex/Repositories/MusicObjectDetector-TF/MusicObjectDetector/mapping_all_classes.txt"
#   shuffle: false
#   num_readers: 1
#   num_epochs: 1
# }
